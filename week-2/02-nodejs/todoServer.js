/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined i

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const jwt = require('jsonwebtoken');
  const fs = require('fs');
  
  const app = express();
  
  const jwtKey = '12345'
  const port = 3030;
  let todoDatabase = [];
  let id =1;

  function getIdIndex(arr, id) {
    return arr.findIndex((element)=>element.id==id ? true:false)
  }

  async function readDatabase() {
    let data = fs.readFile('todoServer.js','utf-8',).then((err,data)=>{
      
    });
    console.log(data);
  }
  readFile('todos.js')
  
  app.use(bodyParser.json())
  
  app.get('/todos', (req, res)=>{
    res.status(200).send(todoDatabase);
  });

  app.get('/todos/:id', (req, res)=>{
    let element = todoDatabase.find((element)=>{
      return element.id == req.params.id ? true :false;
    })
    if(!element){
          res.status(404).send();
          return;
    }
    res.status(200).json(element);
  })

  app.post('/todos', (req,res)=>{
    const data = req.body;
    const title = data.title;
    data.id = id;
    todoDatabase.push(data);
    res.status(201).json({
      message:'TODO successfully stored',
      id
    })
    id++;

  })

  app.put('/todos/:id', (req, res)=>{
    let id = req.params.id;
    index = getIdIndex(todoDatabase, id);
    let dataToStore = req.body;
    if(index!=-1) {
      dataToStore.id = todoDatabase[index].id; 
      todoDatabase[index] = req.body;
      res.status(200).json({
        message:'stored successfully'
      })
      return;
    }

    res.status(404).send();
  })

  app.delete('/todos/:id',(req,res)=>{
    let id = parseInt(req.params.id);
    index = getIdIndex(todoDatabase, id);
    console.log(id, index);
    if(index != -1) {
      todoDatabase.splice(index,1);
      res.status(200).send();
      return;
    }
    res.status(404).send();
  })

  app.listen(port, ()=>{
    console.log('server started successfully');
  })
  module.exports = app;

